Docker

Что это такое?

  Docker – это операционная система для контейнеров. Подобно тому как виртуальная
  машина создает виртуальное представление аппаратного обеспечения сервера (то есть
  устраняет необходимость непосредственно управлять таковым), контейнеры создают
  виртуальное представление серверной операционной системы. 
  Говоря простым языком docker – средство упаковки, доставки и запуска приложений.

Проблемы, которые docker решает:

  1)	Передача продукта клиенту
  Намного удобнее передавать докер чем искать проблемы на серверах клиента.
  
  2)	Переиспользуемость
  Лучше поставить докер, чем подготаливать каждый раз одинаковую конфигурацию для работы.
  
Плюсы докера:

  •	есть контролируемая среда (как в виртуальных машинах)
  •	есть эффективное управление серверными ресурсами
  •	лёгкость в обновлении и поддержке образов
  •	низкий порог вхождения
  
  Подобно виртуальной машине докер запускает свои процессы в собственной, заранее
  настроенной операционной системе. Но при этом все процессы докера работают на
  физическом host сервере деля все процессоры и всю доступную память со всеми
  другими процессами, запущенными в host системе.
  
  Подход, используемый докером находится посередине между запуском всего на
  физическом сервере и полной виртуализацией, предлагаемой виртуальными
  машинами. Этот подход называется контейнеризацией.
  
Сравнение с виртуальной машиной

  ВМ сама по себе большая, так как содержит целую операционную систему.
  Если нам нужно развернуть виртуальную машину, то нужно нести с собой и ядро, и всё
  пользовательское окружение, и какой-то запас места. Если говорить о докере, то он обычно
  используется для одного приложения, а значит весит не так много.
  
Основные понятия докера

  Docker image – ваша сборка, все что вы упаковали, готовое к запуску приложение, но еще не запущенное. 
  Контейнер – работающее приложение, созданное на базе образа (docker image).
  Для контейнера образ - это read-only система, а значит он не может его изменить.
  Контейнер работает только пока работает приложение.
  
  Dockerfile
    1.	“базовый образ с которого начинаем сборку” 
      •	FROM python:3.6
    2.	“определяет что нужно выполнить определенную команду” 
      •	RUN mkdir –p /usr/src/app/
      •	RUN pip install –no-cache-dir –r requirements.txt
    3.	“перейти в данный каталог” 
      •	WORKDIR /usr/src/app/
    4.	“принимает два аргумента откуда и куда” 
      •	COPY . /usr/src/app/
    5.	“что нужно делать после запуска контейнера” (cmd запускает через shell)
      •	CMD [“python”, “app.py”]
      •	ENTRYPOINT [“python”, “app.py”]
    6.	“пробрасывание порта для web” 
      •	EXPOSE 8080
    7.	“переменная окружения”
      •	ENV TZ Europe/Moscow
      
  Docker volume – папка, примонтированная к контейнеру (всё что сохраняется внутри контейнера попадает в volume)
    Docker volume ls – для проверки доступных volume
    Docker volume create anyName – для создания volume
  
  Docker compose – позволяет управлять контейнерами на основе единого
  конфигурационного файла, в котором описаны контейнеры,
  их параметры и их взаимосвязи
    Docker-compose.yaml - В нем содержатся: volume, services (image, build, restart, env, ports и т.д.)
    
  Docker registry – реестр образов, предназначен для хранения и дистрибуции готовых образов.
  Образы можно создать самостоятельно либо скачать из docker hub.
  
  Docker hub – реестр образов, некоторые из которых написаны людьми, а другие поддерживаются разработчиками.
  
  Union filesystem – для каждого нового контейнера нецелесообразно выделять
  большое количество места. Благодаря объединенной файловой системе,
  в Docker нужно создать только один слой поверх образа, а остальная его часть
  может использоваться всеми контейнерами. Это также дает дополнительное преимущество
  в виде сокращения времени запуска, поскольку нет необходимости копировать файлы
  образов и другие данные. 
  Union Filesystem также обеспечивает изоляцию, поскольку контейнеры
  имеют доступ только для чтения к слоям образов. Если им понадобится
  изменить какой-либо из общих файлов, доступных только для чтения, они используют
  копирование при записи — копирование контента на верхний доступный для записи уровень,
  где его можно безопасно изменить.
  
Основные команды докера

  Docker images –позволяет посмотреть локальные образы
  
  Docker ps – позволяет посмотреть какие контейнеры сейчас запущены
    -а, добавляет еще ранее запущенные контейнеры
    -q, для возвращения лишь id контенеров
    
  Docker build, создает docker образ
    -t hello-world (тег имени) . (текущая директория)
    
  Docker run – запускает образ
    --name, добавляет имя контейнеру
    -d, для работы контейнеры в фоне
    --rm ,для автоматического удаления корнтейнера после утсановки/выполнения работы
    -p 8080:8080, два порта - порт для запуска на своей машине и порт внутри докер контейнера
    -e TZ=Europe/Moscow, для установки окружения
    -v  “абсолютный путь на хостовой машине”:”абсолютный путь докер контейнера”,
    Монтирование локальной папки в докер контейнер
    
  Docker rm, удаляет контейнер
    $(docker ps –qa), для удаления всех контейнеров
